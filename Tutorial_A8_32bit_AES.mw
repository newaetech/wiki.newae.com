Most of our previous tutorials were running on 8-bit modes of operation. We can target typical implementation on ARM devices which actually looks a little different.

This tutorial is ONLY possible if you have an ARM target. For example the UFO Board with the STM32F3 target (or similar).

== Background ==

A 32-bit machine can operate on 32-bit words, so it seems wasteful to use the same 8-bit operations. Indeed we can speed up the AES operation considerably by generating several tables (called T-Tables), as was described in the book [http://www.springer.com/gp/book/9783540425809 The Design of Rijndael] which was published by the authors of AES.

== Building Firmware ==

You will have to build with the <code>PLATFORM</code> set to one of the ARM targets (such as <code>CW308_STM32F0</code> for the STM32F0 victim, or <code>CW308_STM32F3</code> for the STM32F3 victim). If you haven't setup the ARM build environment see the page [[CW308T-STM32F#Example_Projects]]. Assuming your build environment is OK, you can build it as follows:

   cd chipwhisperer\hardware\victims\firmware\simpleserial-aes
   make PLATFORM=CW308_STM32F3 CRYPTO_TARGET=MBEDTLS

If this works you should get something like the following:

   Creating Symbol Table: simpleserial-aes-CW308_STM32F3.sym
   arm-none-eabi-nm -n simpleserial-aes-CW308_STM32F3.elf > simpleserial-aes-CW308_
   STM32F3.sym
   Size after:
      text    data     bss     dec     hex filename
      8440    1076   10320   19836    4d7c simpleserial-aes-CW308_STM32F3.elf
      +--------------------------------------------------------
      + Built for platform CW308T: STM32F3 Target
      +--------------------------------------------------------

== Hardware Setup ==

# Before finishing the hardware setup, you should connect to the target device. To do this you can use one of the standard setup scripts. This will provide a clock & setup TX/RX lines as expected for the STM32F, which is required for the programmer to work.

=== Programming STM32F Device ===

{{:CW308T-STM32F/ChipWhisperer_Bootloader}}

== Capturing Traces ==

The capture process is similar to previous setups. After running the setup script, adjust the following settings:

# Set the offset to by 0 samples:
#: [[File:A8_offset.png|400px]]
# Adjust the gain upward to get a good signal - note it will look VERY different from previous encryption examples:
#: [[File:A8_traceexample.png|400px]]
#Capture a larger (~500) number of traces.

== Running Attack ==

The attach is ran in the same manner as previous AES attacks, we use the same leakage assumptions as we don't actually care about the T-Table implementation. The resulting output vs. point location will look a little "messier", as shown here:

[[File:A8_outputvspoint.png]]
